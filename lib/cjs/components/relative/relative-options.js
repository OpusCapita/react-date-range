'use strict';

exports.__esModule = true;
exports.getRelativeOption = undefined;

var _constants = require('./constants');

var _constants2 = _interopRequireDefault(_constants);

var _values = require('./values');

var _values2 = _interopRequireDefault(_values);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var relativeOptions = function relativeOptions(dates) {
  return [{
    label: dates.yesterday,
    value: _values2.default.yesterday,
    order: 1,
    granularity: _constants2.default.DAY,
    past: true
  }, {
    label: dates.today,
    value: _values2.default.today,
    order: 2,
    granularity: _constants2.default.DAY
  }, {
    label: dates.tomorrow,
    value: _values2.default.tomorrow,
    order: 3,
    granularity: _constants2.default.DAY
  }, {
    label: dates.startOfThePreviousWeek,
    value: _values2.default.startOfThePreviousWeek,
    order: 1,
    granularity: _constants2.default.WEEK,
    past: true
  }, {
    label: dates.endOfThePreviousWeek,
    value: _values2.default.endOfThePreviousWeek,
    order: 2,
    granularity: _constants2.default.WEEK,
    past: true
  }, {
    label: dates.startOfTheCurrentWeek,
    value: _values2.default.startOfTheCurrentWeek,
    order: 3,
    granularity: _constants2.default.WEEK,
    past: true
  }, {
    label: dates.endOfTheCurrentWeek,
    value: _values2.default.endOfTheCurrentWeek,
    order: 4,
    granularity: _constants2.default.WEEK
  }, {
    label: dates.startOfTheNextWeek,
    value: _values2.default.startOfTheNextWeek,
    order: 5,
    granularity: _constants2.default.WEEK
  }, {
    label: dates.endOfTheNextWeek,
    value: _values2.default.endOfTheNextWeek,
    order: 6,
    granularity: _constants2.default.WEEK
  }, {
    label: dates.startOfThePreviousMonth,
    value: _values2.default.startOfThePreviousMonth,
    order: 1,
    granularity: _constants2.default.MONTH,
    past: true
  }, {
    label: dates.endOfThePreviousMonth,
    value: _values2.default.endOfThePreviousMonth,
    order: 2,
    granularity: _constants2.default.MONTH,
    past: true
  }, {
    label: dates.startOfTheCurrentMonth,
    value: _values2.default.startOfTheCurrentMonth,
    order: 3,
    granularity: _constants2.default.MONTH,
    past: true
  }, {
    label: dates.endOfTheCurrentMonth,
    value: _values2.default.endOfTheCurrentMonth,
    order: 4,
    granularity: _constants2.default.MONTH
  }, {
    label: dates.startOfTheNextMonth,
    value: _values2.default.startOfTheNextMonth,
    order: 5,
    granularity: _constants2.default.MONTH
  }, {
    label: dates.endOfTheNextMonth,
    value: _values2.default.endOfTheNextMonth,
    order: 6,
    granularity: _constants2.default.MONTH
  }, {
    label: dates.startOfThePreviousYear,
    value: _values2.default.startOfThePreviousYear,
    order: 1,
    granularity: _constants2.default.YEAR,
    past: true
  }, {
    label: dates.endOfThePreviousYear,
    value: _values2.default.endOfThePreviousYear,
    order: 2,
    granularity: _constants2.default.YEAR,
    past: true
  }, {
    label: dates.startOfTheCurrentYear,
    value: _values2.default.startOfTheCurrentYear,
    order: 3,
    granularity: _constants2.default.YEAR,
    past: true
  }, {
    label: dates.endOfTheCurrentYear,
    value: _values2.default.endOfTheCurrentYear,
    order: 4,
    granularity: _constants2.default.YEAR
  }, {
    label: dates.startOfTheNextYear,
    value: _values2.default.startOfTheNextYear,
    order: 5,
    granularity: _constants2.default.YEAR
  }, {
    label: dates.endOfTheNextYear,
    value: _values2.default.endOfTheNextYear,
    order: 6,
    granularity: _constants2.default.YEAR
  }];
};

var getRelativeOption = function getRelativeOption(inputDate, dates) {
  return inputDate ? relativeOptions(dates).find(function (option) {
    return (!option.value.moment || option.value.moment === inputDate.moment) && option.value.unit === inputDate.unit && option.value.timing === inputDate.timing;
  }) : undefined;
};

exports.default = relativeOptions;
exports.getRelativeOption = getRelativeOption;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,