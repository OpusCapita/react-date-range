import Constants from './constants';
import values from './values';

export default {
  endDate: undefined,
  onChange: function onChange() {},
  options: [{
    label: 'Yesterday',
    value: values.yesterday,
    order: 1,
    granularity: Constants.DAY,
    past: true
  }, {
    label: 'Today',
    value: values.today,
    order: 2,
    granularity: Constants.DAY
  }, {
    label: 'Tomorrow',
    value: values.tomorrow,
    order: 3,
    granularity: Constants.DAY
  }, {
    label: 'Start of the previous week',
    value: values.startOfPreviousWeek,
    order: 1,
    granularity: Constants.WEEK,
    past: true
  }, {
    label: 'End of the previous week',
    value: values.endOfPreviousWeek,
    order: 2,
    granularity: Constants.WEEK,
    past: true
  }, {
    label: 'Start of the current week',
    value: values.startOfCurrentWeek,
    order: 3,
    granularity: Constants.WEEK,
    past: true
  }, {
    label: 'End of the current week',
    value: values.endOfCurrentWeek,
    order: 4,
    granularity: Constants.WEEK
  }, {
    label: 'Start of the next week',
    value: values.startOfNextWeek,
    order: 5,
    granularity: Constants.WEEK
  }, {
    label: 'End of the next week',
    value: values.endOfNextWeek,
    order: 6,
    granularity: Constants.WEEK
  }, {
    label: 'Start of the previous month',
    value: values.startOfPreviousMonth,
    order: 1,
    granularity: Constants.MONTH,
    past: true
  }, {
    label: 'End of the previous month',
    value: values.endOfPreviousMonth,
    order: 2,
    granularity: Constants.MONTH,
    past: true
  }, {
    label: 'Start of the current month',
    value: values.startOfCurrentMonth,
    order: 3,
    granularity: Constants.MONTH,
    past: true
  }, {
    label: 'End of the current month',
    value: values.endOfCurrentMonth,
    order: 4,
    granularity: Constants.MONTH
  }, {
    label: 'Start of the next month',
    value: values.startOfNextMonth,
    order: 5,
    granularity: Constants.MONTH
  }, {
    label: 'End of the next month',
    value: values.endOfNextMonth,
    order: 6,
    granularity: Constants.MONTH
  }, {
    label: 'Start of the previous year',
    value: values.startOfPreviousYear,
    order: 1,
    granularity: Constants.YEAR,
    past: true
  }, {
    label: 'End of the previous year',
    value: values.endOfPreviousYear,
    order: 2,
    granularity: Constants.YEAR,
    past: true
  }, {
    label: 'Start of the current year',
    value: values.startOfCurrentYear,
    order: 3,
    granularity: Constants.YEAR,
    past: true
  }, {
    label: 'End of the current year',
    value: values.endOfCurrentYear,
    order: 4,
    granularity: Constants.YEAR
  }, {
    label: 'Start of the next year',
    value: values.startOfNextYear,
    order: 5,
    granularity: Constants.YEAR
  }, {
    label: 'End of the next year',
    value: values.endOfNextYear,
    order: 6,
    granularity: Constants.YEAR
  }],
  startDate: undefined
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3JlbGF0aXZlL2RlZmF1bHQtcHJvcHMuanMiXSwibmFtZXMiOlsiQ29uc3RhbnRzIiwidmFsdWVzIiwiZW5kRGF0ZSIsInVuZGVmaW5lZCIsIm9uQ2hhbmdlIiwib3B0aW9ucyIsImxhYmVsIiwidmFsdWUiLCJ5ZXN0ZXJkYXkiLCJvcmRlciIsImdyYW51bGFyaXR5IiwiREFZIiwicGFzdCIsInRvZGF5IiwidG9tb3Jyb3ciLCJzdGFydE9mUHJldmlvdXNXZWVrIiwiV0VFSyIsImVuZE9mUHJldmlvdXNXZWVrIiwic3RhcnRPZkN1cnJlbnRXZWVrIiwiZW5kT2ZDdXJyZW50V2VlayIsInN0YXJ0T2ZOZXh0V2VlayIsImVuZE9mTmV4dFdlZWsiLCJzdGFydE9mUHJldmlvdXNNb250aCIsIk1PTlRIIiwiZW5kT2ZQcmV2aW91c01vbnRoIiwic3RhcnRPZkN1cnJlbnRNb250aCIsImVuZE9mQ3VycmVudE1vbnRoIiwic3RhcnRPZk5leHRNb250aCIsImVuZE9mTmV4dE1vbnRoIiwic3RhcnRPZlByZXZpb3VzWWVhciIsIllFQVIiLCJlbmRPZlByZXZpb3VzWWVhciIsInN0YXJ0T2ZDdXJyZW50WWVhciIsImVuZE9mQ3VycmVudFllYXIiLCJzdGFydE9mTmV4dFllYXIiLCJlbmRPZk5leHRZZWFyIiwic3RhcnREYXRlIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxTQUFQLE1BQXNCLGFBQXRCO0FBQ0EsT0FBT0MsTUFBUCxNQUFtQixVQUFuQjs7QUFFQSxlQUFlO0FBQ2JDLFdBQVNDLFNBREk7QUFFYkMsWUFBVSxvQkFBTSxDQUFFLENBRkw7QUFHYkMsV0FBUyxDQUNQO0FBQ0VDLFdBQU8sV0FEVDtBQUVFQyxXQUFPTixPQUFPTyxTQUZoQjtBQUdFQyxXQUFPLENBSFQ7QUFJRUMsaUJBQWFWLFVBQVVXLEdBSnpCO0FBS0VDLFVBQU07QUFMUixHQURPLEVBUVA7QUFDRU4sV0FBTyxPQURUO0FBRUVDLFdBQU9OLE9B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RmhCO0FBR0V4QixXQUFPLENBSFQ7QUFJRUMsaUJBQWFWLFVBQVU4QjtBQUp6QixHQXZITyxFQTZIUDtBQUNFeEIsV0FBTyx3QkFEVDtBQUVFQyxXQUFPTixPQUFPaUMsZUFGaEI7QUFHRXpCLFdBQU8sQ0FIVDtBQUlFQyxpQkFBYVYsVUFBVThCO0FBSnpCLEdBN0hPLEVBbUlQO0FBQ0V4QixXQUFPLHNCQURUO0FBRUVDLFdBQU9OLE9BQU9rQyxhQUZoQjtBQUdFMUIsV0FBTyxDQUhUO0FBSUVDLGlCQUFhVixVQUFVOEI7QUFKekIsR0FuSU8sQ0FISTtBQTZJYk0sYUFBV2pDO0FBN0lFLENBQWYiLCJmaWxlIjoiZGVmYXVsdC1wcm9wcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb25zdGFudHMgZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHZhbHVlcyBmcm9tICcuL3ZhbHVlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZW5kRGF0ZTogdW5kZWZpbmVkLFxuICBvbkNoYW5nZTogKCkgPT4ge30sXG4gIG9wdGlvbnM6IFtcbiAgICB7XG4gICAgICBsYWJlbDogJ1llc3RlcmRheScsXG4gICAgICB2YWx1ZTogdmFsdWVzLnllc3RlcmRheSxcbiAgICAgIG9yZGVyOiAxLFxuICAgICAgZ3JhbnVsYXJpdHk6IENvbnN0YW50cy5EQVksXG4gICAgICBwYXN0OiB0cnVlLFxuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6ICdUb2RheScsXG4gICAgICB2YWx1ZTogdmFsdWVzLnRvZGF5LFxuICAgICAgb3JkZXI6IDIsXG4gICAgICBncmFudWxhcml0eTogQ29uc3RhbnRzLkRBWSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiAnVG9tb3Jyb3cnLFxuICAgICAgdmFsdWU6IHZhbHVlcy50b21vcnJvdyxcbiAgICAgIG9yZGVyOiAzLFxuICAgICAgZ3JhbnVsYXJpdHk6IENvbnN0YW50cy5EQVksXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogJ1N0YXJ0IG9mIHRoZSBwcmV2aW91cyB3ZWVrJyxcbiAgICAgIHZhbHVlOiB2YWx1ZXMuc3RhcnRPZlByZXZpb3VzV2VlayxcbiAgICAgIG9yZGVyOiAxLFxuICAgICAgZ3JhbnVsYXJpdHk6IENvbnN0YW50cy5XRUVLLFxuICAgICAgcGFzdDogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiAnRW5kIG9mIHRoZSBwcmV2aW91cyB3ZWVrJyxcbiAgICAgIHZhbHVlOiB2YWx1ZXMuZW5kT2ZQcmV2aW91c1dlZWssXG4gICAgICBvcmRlcjogMixcbiAgICAgIGdyYW51bGFyaXR5OiBDb25zdGFudHMuV0VFSyxcbiAgICAgIHBhc3Q6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogJ1N0YXJ0IG9mIHRoZSBjdXJyZW50IHdlZWsnLFxuICAgICAgdmFsdWU6IHZhbHVlcy5zdGFydE9mQ3VycmVudFdlZWssXG4gICAgICBvcmRlcjogMyxcbiAgICAgIGdyYW51bGFyaXR5OiBDb25zdGFudHMuV0VFSyxcbiAgICAgIHBhc3Q6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogJ0VuZCBvZiB0aGUgY3VycmVudCB3ZWVrJyxcbiAgICAgIHZhbHVlOiB2YWx1ZXMuZW5kT2ZDdXJyZW50V2VlayxcbiAgICAgIG9yZGVyOiA0LFxuICAgICAgZ3JhbnVsYXJpdHk6IENvbnN0YW50cy5XRUVLLFxuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6ICdTdGFydCBvZiB0aGUgbmV4dCB3ZWVrJyxcbiAgICAgIHZhbHVlOiB2YWx1ZXMuc3RhcnRPZk5leHRXZWVrLFxuICAgICAgb3JkZXI6IDUsXG4gICAgICBncmFudWxhcml0eTogQ29uc3RhbnRzLldFRUssXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogJ0VuZCBvZiB0aGUgbmV4dCB3ZWVrJyxcbiAgICAgIHZhbHVlOiB2YWx1ZXMuZW5kT2ZOZXh0V2VlayxcbiAgICAgIG9yZGVyOiA2LFxuICAgICAgZ3JhbnVsYXJpdHk6IENvbnN0YW50cy5XRUVLLFxuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6ICdTdGFydCBvZiB0aGUgcHJldmlvdXMgbW9udGgnLFxuICAgICAgdmFsdWU6IHZhbHVlcy5zdGFydE9mUHJldmlvdXNNb250aCxcbiAgICAgIG9yZGVyOiAxLFxuICAgICAgZ3JhbnVsYXJpdHk6IENvbnN0YW50cy5NT05USCxcbiAgICAgIHBhc3Q6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogJ0VuZCBvZiB0aGUgcHJldmlvdXMgbW9udGgnLFxuICAgICAgdmFsdWU6IHZhbHVlcy5lbmRPZlByZXZpb3VzTW9udGgsXG4gICAgICBvcmRlcjogMixcbiAgICAgIGdyYW51bGFyaXR5OiBDb25zdGFudHMuTU9OVEgsXG4gICAgICBwYXN0OiB0cnVlLFxuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6ICdTdGFydCBvZiB0aGUgY3VycmVudCBtb250aCcsXG4gICAgICB2YWx1ZTogdmFsdWVzLnN0YXJ0T2ZDdXJyZW50TW9udGgsXG4gICAgICBvcmRlcjogMyxcbiAgICAgIGdyYW51bGFyaXR5OiBDb25zdGFudHMuTU9OVEgsXG4gICAgICBwYXN0OiB0cnVlLFxuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6ICdFbmQgb2YgdGhlIGN1cnJlbnQgbW9udGgnLFxuICAgICAgdmFsdWU6IHZhbHVlcy5lbmRPZkN1cnJlbnRNb250aCxcbiAgICAgIG9yZGVyOiA0LFxuICAgICAgZ3JhbnVsYXJpdHk6IENvbnN0YW50cy5NT05USCxcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiAnU3RhcnQgb2YgdGhlIG5leHQgbW9udGgnLFxuICAgICAgdmFsdWU6IHZhbHVlcy5zdGFydE9mTmV4dE1vbnRoLFxuICAgICAgb3JkZXI6IDUsXG4gICAgICBncmFudWxhcml0eTogQ29uc3RhbnRzLk1PTlRILFxuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6ICdFbmQgb2YgdGhlIG5leHQgbW9udGgnLFxuICAgICAgdmFsdWU6IHZhbHVlcy5lbmRPZk5leHRNb250aCxcbiAgICAgIG9yZGVyOiA2LFxuICAgICAgZ3JhbnVsYXJpdHk6IENvbnN0YW50cy5NT05USCxcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiAnU3RhcnQgb2YgdGhlIHByZXZpb3VzIHllYXInLFxuICAgICAgdmFsdWU6IHZhbHVlcy5zdGFydE9mUHJldmlvdXNZZWFyLFxuICAgICAgb3JkZXI6IDEsXG4gICAgICBncmFudWxhcml0eTogQ29uc3RhbnRzLllFQVIsXG4gICAgICBwYXN0OiB0cnVlLFxuICAgIH0sXG4gICAge1xuICAgICAgbGFiZWw6ICdFbmQgb2YgdGhlIHByZXZpb3VzIHllYXInLFxuICAgICAgdmFsdWU6IHZhbHVlcy5lbmRPZlByZXZpb3VzWWVhcixcbiAgICAgIG9yZGVyOiAyLFxuICAgICAgZ3JhbnVsYXJpdHk6IENvbnN0YW50cy5ZRUFSLFxuICAgICAgcGFzdDogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiAnU3RhcnQgb2YgdGhlIGN1cnJlbnQgeWVhcicsXG4gICAgICB2YWx1ZTogdmFsdWVzLnN0YXJ0T2ZDdXJyZW50WWVhcixcbiAgICAgIG9yZGVyOiAzLFxuICAgICAgZ3JhbnVsYXJpdHk6IENvbnN0YW50cy5ZRUFSLFxuICAgICAgcGFzdDogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiAnRW5kIG9mIHRoZSBjdXJyZW50IHllYXInLFxuICAgICAgdmFsdWU6IHZhbHVlcy5lbmRPZkN1cnJlbnRZZWFyLFxuICAgICAgb3JkZXI6IDQsXG4gICAgICBncmFudWxhcml0eTogQ29uc3RhbnRzLllFQVIsXG4gICAgfSxcbiAgICB7XG4gICAgICBsYWJlbDogJ1N0YXJ0IG9mIHRoZSBuZXh0IHllYXInLFxuICAgICAgdmFsdWU6IHZhbHVlcy5zdGFydE9mTmV4dFllYXIsXG4gICAgICBvcmRlcjogNSxcbiAgICAgIGdyYW51bGFyaXR5OiBDb25zdGFudHMuWUVBUixcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiAnRW5kIG9mIHRoZSBuZXh0IHllYXInLFxuICAgICAgdmFsdWU6IHZhbHVlcy5lbmRPZk5leHRZZWFyLFxuICAgICAgb3JkZXI6IDYsXG4gICAgICBncmFudWxhcml0eTogQ29uc3RhbnRzLllFQVIsXG4gICAgfSxcbiAgXSxcbiAgc3RhcnREYXRlOiB1bmRlZmluZWQsXG59O1xuIl19